// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Yasamall.DAL;

namespace Yasamall.Migrations
{
    [DbContext(typeof(Db_Yasamall))]
    partial class Db_YasamallModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Yasamall.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("PhotoURL");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Yasamall.Models.BackgroundImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PhotoURLFive");

                    b.Property<string>("PhotoURLFour");

                    b.Property<string>("PhotoURLOne");

                    b.Property<string>("PhotoURLThree");

                    b.Property<string>("PhotoURLTwo");

                    b.HasKey("Id");

                    b.ToTable("BackgroundImages");

                    b.HasData(
                        new { Id = 1, PhotoURLFive = "prlx13.jpg", PhotoURLFour = "prlx10.jpg", PhotoURLOne = "prlx3.jpg", PhotoURLThree = "prlx8.jpg", PhotoURLTwo = "prlx7.jpg" }
                    );
                });

            modelBuilder.Entity("Yasamall.Models.Brands", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("FacebookLink")
                        .HasMaxLength(200);

                    b.Property<int>("FloorId");

                    b.Property<string>("InstagramLink")
                        .HasMaxLength(200);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsFilm");

                    b.Property<bool>("IsOnePage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OnePageInfo");

                    b.Property<string>("OnePagePhotoURL");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("PhotoURL");

                    b.Property<string>("UserId");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FloorId");

                    b.HasIndex("UserId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Yasamall.Models.BrandTags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandId");

                    b.Property<int?>("TagsId");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("TagsId");

                    b.ToTable("BrandTags");
                });

            modelBuilder.Entity("Yasamall.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new { Id = 1, Name = "Mağaza" },
                        new { Id = 2, Name = "Restoran" },
                        new { Id = 3, Name = "Əyləncə" }
                    );
                });

            modelBuilder.Entity("Yasamall.Models.Colors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color");

                    b.Property<string>("ColorCode");

                    b.Property<bool>("IsChecked");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new { Id = 1, Color = "Qara", ColorCode = "black", IsChecked = false },
                        new { Id = 2, Color = "Qırmızı", ColorCode = "red", IsChecked = false },
                        new { Id = 3, Color = "Mavi", ColorCode = "blue", IsChecked = false },
                        new { Id = 4, Color = "Narıncı", ColorCode = "orange", IsChecked = false },
                        new { Id = 5, Color = "Çəhrayı", ColorCode = "pink", IsChecked = false },
                        new { Id = 6, Color = "Tünd Göy", ColorCode = "darkBlue", IsChecked = false },
                        new { Id = 7, Color = "Bordo", ColorCode = "bordo", IsChecked = false },
                        new { Id = 8, Color = "Haki", ColorCode = "khaki", IsChecked = false },
                        new { Id = 9, Color = "Ağ", ColorCode = "white", IsChecked = false },
                        new { Id = 10, Color = "Boz", ColorCode = "gray", IsChecked = false },
                        new { Id = 11, Color = "Sarı", ColorCode = "yellow", IsChecked = false },
                        new { Id = 12, Color = "Qəhvəyi", ColorCode = "brown", IsChecked = false },
                        new { Id = 13, Color = "Yaşıl", ColorCode = "green", IsChecked = false },
                        new { Id = 14, Color = "Tünd Yaşıl", ColorCode = "darkGreen", IsChecked = false },
                        new { Id = 15, Color = "Bənövşəyi", ColorCode = "violet", IsChecked = false }
                    );
                });

            modelBuilder.Entity("Yasamall.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Floor");

                    b.HasData(
                        new { Id = 1, Name = "1-ci" },
                        new { Id = 2, Name = "2-ci" },
                        new { Id = 3, Name = "3-cü" },
                        new { Id = 4, Name = "4-cü" }
                    );
                });

            modelBuilder.Entity("Yasamall.Models.Halls", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Yasamall.Models.MailBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired();

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TextBody")
                        .IsRequired();

                    b.Property<DateTime>("Time");

                    b.HasKey("Id");

                    b.ToTable("MailBox");
                });

            modelBuilder.Entity("Yasamall.Models.NewProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductsId");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("NewProducts");
                });

            modelBuilder.Entity("Yasamall.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandsId");

                    b.Property<string>("MainInfo")
                        .IsRequired();

                    b.Property<string>("ShortInfo")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("Time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Yasamall.Models.NewsPhotos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMain");

                    b.Property<int>("NewsId");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("NewsId");

                    b.ToTable("NewsPhotos");
                });

            modelBuilder.Entity("Yasamall.Models.ProductColors", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ColorId");

                    b.Property<int>("ProductsId");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("Yasamall.Models.ProductPhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsMain");

                    b.Property<string>("PhotoURL")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("ProductsId");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.ToTable("ProductPhoto");
                });

            modelBuilder.Entity("Yasamall.Models.Products", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandsId");

                    b.Property<int?>("HallsId");

                    b.Property<string>("Info")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.HasIndex("BrandsId");

                    b.HasIndex("HallsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Yasamall.Models.ProductSizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductsId");

                    b.Property<int>("SizesId");

                    b.HasKey("Id");

                    b.HasIndex("ProductsId");

                    b.HasIndex("SizesId");

                    b.ToTable("ProductSizes");
                });

            modelBuilder.Entity("Yasamall.Models.Sizes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Size");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new { Id = 1, Size = "XS" },
                        new { Id = 2, Size = "S" },
                        new { Id = 3, Size = "M" },
                        new { Id = 4, Size = "L" },
                        new { Id = 5, Size = "XL" }
                    );
                });

            modelBuilder.Entity("Yasamall.Models.StaticData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("FacebookLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("InstagramLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Map")
                        .IsRequired();

                    b.Property<string>("Mobile")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("TwitterLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("YoutubeLink")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("StaticData");

                    b.HasData(
                        new { Id = 1, Email = "yasa@mall.az", FacebookLink = "www.facebook.com", InstagramLink = "www.instagram.com", Map = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d48625.60582523336!2d49.77600605509767!3d40.3844681682866!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x40307d8c33c62a3f%3A0x77807ca915edd570!2zWWFzYW1hbCwgQmFrw7w!5e0!3m2!1str!2s!4v1566417631661!5m2!1str!2s", Mobile = "+994 55 555 55 55", Phone = "012 555 55 55", TwitterLink = "www.twitter.com", YoutubeLink = "www.youtube.com" }
                    );
                });

            modelBuilder.Entity("Yasamall.Models.Tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Tags");

                    b.HasData(
                        new { Id = 1, CategoryId = 1, Name = "Qadın Geyimləri" },
                        new { Id = 2, CategoryId = 1, Name = "Kişi Geyimləri" },
                        new { Id = 3, CategoryId = 1, Name = "Uşaq Geyimləri" },
                        new { Id = 4, CategoryId = 1, Name = "Qadın Ayaqqabıları" },
                        new { Id = 5, CategoryId = 1, Name = "Kişi Ayaqqabıları" },
                        new { Id = 6, CategoryId = 1, Name = "Kitab" },
                        new { Id = 7, CategoryId = 1, Name = "Aksesuarlar" },
                        new { Id = 8, CategoryId = 2, Name = "Milli Mətbəx" },
                        new { Id = 9, CategoryId = 2, Name = "Fast Food" },
                        new { Id = 10, CategoryId = 2, Name = "Pizza" },
                        new { Id = 11, CategoryId = 2, Name = "İsti Yeməklər" },
                        new { Id = 12, CategoryId = 2, Name = "Kofe" },
                        new { Id = 13, CategoryId = 2, Name = "Şirniyyat" },
                        new { Id = 14, CategoryId = 2, Name = "Xarici Mətbəx" },
                        new { Id = 15, CategoryId = 3, Name = "Cinema" },
                        new { Id = 16, CategoryId = 3, Name = "Bowling" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Yasamall.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Yasamall.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yasamall.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Yasamall.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.Brands", b =>
                {
                    b.HasOne("Yasamall.Models.Category", "Category")
                        .WithMany("Brands")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yasamall.Models.Floor", "Floor")
                        .WithMany("Brands")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yasamall.Models.AppUser", "User")
                        .WithMany("Brand")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Yasamall.Models.BrandTags", b =>
                {
                    b.HasOne("Yasamall.Models.Brands", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId");

                    b.HasOne("Yasamall.Models.Tags", "Tag")
                        .WithMany()
                        .HasForeignKey("TagsId");
                });

            modelBuilder.Entity("Yasamall.Models.Halls", b =>
                {
                    b.HasOne("Yasamall.Models.Brands", "Brand")
                        .WithMany("Hall")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.NewProducts", b =>
                {
                    b.HasOne("Yasamall.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.News", b =>
                {
                    b.HasOne("Yasamall.Models.Brands", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.NewsPhotos", b =>
                {
                    b.HasOne("Yasamall.Models.News", "News")
                        .WithMany("Photos")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.ProductColors", b =>
                {
                    b.HasOne("Yasamall.Models.Colors", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yasamall.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.ProductPhoto", b =>
                {
                    b.HasOne("Yasamall.Models.Products", "Product")
                        .WithMany("Photos")
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.Products", b =>
                {
                    b.HasOne("Yasamall.Models.Brands", "Brands")
                        .WithMany("Products")
                        .HasForeignKey("BrandsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yasamall.Models.Halls", "Hall")
                        .WithMany("Product")
                        .HasForeignKey("HallsId");
                });

            modelBuilder.Entity("Yasamall.Models.ProductSizes", b =>
                {
                    b.HasOne("Yasamall.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Yasamall.Models.Sizes", "Size")
                        .WithMany()
                        .HasForeignKey("SizesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Yasamall.Models.Tags", b =>
                {
                    b.HasOne("Yasamall.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
